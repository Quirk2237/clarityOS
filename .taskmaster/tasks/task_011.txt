# Task ID: 11
# Title: Implement Anonymous Onboarding with Session Storage
# Status: done
# Dependencies: 2, 3, 4, 9
# Priority: high
# Description: Create a new user flow where anonymous users can complete the onboarding process and have their data saved to session storage, with an option to create an account later to persist the data. This removes the initial friction of account creation.
# Details:
Modify the 'Get Started' button on the welcome screen to navigate to the onboarding screen without requiring authentication. Update the Brand Onboarding screen's form logic from Task 4; if the user is anonymous, `handleSubmit` should save the form data (`brand_name`, `brand_description`) to a client-side storage mechanism like AsyncStorage. After saving, navigate the anonymous user to a new, minimal 'Create Account' screen that prompts them to sign up to save their progress. Upon successful user registration, retrieve the brand data from storage and use the existing API endpoint from Task 2 to update the new user's profile, then clear the stored data.

# Test Strategy:
1. Anonymous Flow: As a new, unauthenticated user, tap 'Get Started' and verify navigation to the onboarding screen. Submit the form and use developer tools to confirm data is saved in AsyncStorage. Verify navigation to a 'Create Account' prompt. 2. Data Migration: From the prompt, create a new account. Verify the brand data from storage is successfully saved to the new user's profile in the database and that the local storage is cleared. 3. Authenticated Flow Regression: Log in as an existing user and verify the original navigation logic from Task 9 remains intact, directing them to the dashboard or onboarding based on their profile.

# Subtasks:
## 1. Modify Welcome Screen for Anonymous Entry [done]
### Dependencies: None
### Description: Update the 'Get Started' button on the welcome screen to navigate directly to the Brand Onboarding screen without requiring authentication. Adjust the application's navigation stack to permit this route for unauthenticated users.
### Details:
Locate the 'Get Started' button component on the main welcome screen. Change its `onPress` event handler to trigger a navigation action to the 'BrandOnboarding' screen. Modify the navigation container/stack configuration (e.g., React Navigation) to ensure the 'BrandOnboarding' route is accessible to users who are not logged in, preventing any automatic redirects to a login screen.
<info added on 2025-07-10T14:19:59.831Z>
Modified the `handleGetStarted` function to check for a user session. If a session exists, the user is routed to "/" using `router.replace()`. If no session is found, the user is routed to "/onboarding" using `router.push()`. The button text has been simplified to always show "Get Started", and error handling now falls back to the onboarding flow for anonymous users. Debug logging was also added to track the user flow.
</info added on 2025-07-10T14:19:59.831Z>

## 2. Adapt Onboarding Form for Anonymous Data Capture [done]
### Dependencies: 11.1
### Description: Update the Brand Onboarding screen's form submission logic. The `handleSubmit` function must now check the user's authentication status. If the user is anonymous, it should save the form data (`brand_name`, `brand_description`) to session storage (AsyncStorage) instead of making a backend API call.
### Details:
Create a set of utility functions to manage session storage (`saveOnboardingData`, `getOnboardingData`, `clearOnboardingData`) using AsyncStorage. In the `handleSubmit` method of the Brand Onboarding form, retrieve the current user's authentication state. If the user is null or unauthenticated, serialize the form state and pass it to `saveOnboardingData`. After saving, navigate the user to the new 'Create Account' screen.
<info added on 2025-07-10T14:22:49.268Z>
The onboarding form has been adapted to support a dual flow for both authenticated and anonymous users. The main `handleSubmit` function now uses an `isAuthenticated` flag to route logic to separate handlers. For authenticated users, `handleAuthenticatedSubmit` saves data to the database via `updateOnboardingInfo` and navigates to the main app. For anonymous users, `handleAnonymousSubmit` uses the `saveAnonymousOnboardingData` function to save data to AsyncStorage, displays a success message, and returns the user to the welcome screen. The UI now includes helpful text for anonymous users explaining that their data is being saved locally. Clear console logs have been added to distinguish between authentication states.
</info added on 2025-07-10T14:22:49.268Z>

## 4. Integrate Data Migration into New User Registration [done]
### Dependencies: 11.3
### Description: Enhance the registration logic on the new 'Create Account' screen. Upon successful user registration, the system must retrieve the saved brand data from session storage, use the existing API endpoint to persist this data to the new user's profile, and then clear the temporary data from storage.
### Details:
In the success handler for the user registration API call on the 'Create Account' screen, implement the following sequence: 1. Call the `getOnboardingData` utility to retrieve the brand data from AsyncStorage. 2. If data exists, make a `PATCH` or `PUT` request to the user profile update endpoint (from Task 2), sending the retrieved data. 3. Regardless of the update's success, call the `clearOnboardingData` utility to remove the temporary data from AsyncStorage. 4. Navigate the user to the main part of the application.

## 5. Update Global State and Navigation for Dual Flow [done]
### Dependencies: 11.4
### Description: Refactor the application's global state management and navigation logic to gracefully handle both the new anonymous flow and the existing authenticated flow. This ensures the app can differentiate between user types and direct them appropriately.
### Details:
Introduce a flag or state variable in the global state manager (e.g., Redux store, React Context) to track if the user is in the anonymous onboarding flow. Use this state to conditionally control navigation logic. For example, after a successful login, check this flag to see if a data migration step is required. Ensure that authenticated users bypass the anonymous flow entirely and follow the standard user path.
<info added on 2025-07-10T14:25:26.125Z>
Successfully updated global state and navigation logic to support dual flow for both authenticated and anonymous users:

Key Utilities Created:
- Anonymous State Management (`lib/anonymous-state.ts`): Comprehensive utilities for tracking anonymous user onboarding status
  - `isAnonymousWithOnboarding()`: Check if anonymous user has completed onboarding
  - `getAnonymousNavigationTarget()`: Determine appropriate route for anonymous users  
  - `getAnonymousUserState()`: Get complete anonymous user state information
  - `shouldShowWelcome()`: Determine if welcome screen should be shown

AuthProvider Updates:
- Enhanced Navigation Logic: Updated `handleNavigation` to check anonymous state when no session exists
- Smart Routing: Anonymous users with onboarding data can now access main app (`/`), while those without are shown welcome screen (`/welcome`)
- Clear Logging: Added detailed console logs to track navigation decisions for both user types
- Async State Handling: Properly awaits anonymous state before making navigation decisions

Protected Layout Updates:
- Dual Flow Support: Handles both authenticated users (database profile) and anonymous users (session storage)
- Anonymous State Integration: Loads and checks anonymous onboarding state for unauthenticated users
- Conditional Access Control: 
  - Authenticated users: Checked against database profile `is_onboarded` flag
  - Anonymous users: Checked against session storage onboarding data
- Proper Loading States: Shows appropriate loading screens while checking both auth and anonymous states
- Fallback Protection: Graceful error handling with fallback to sign-in for anonymous users without data

Navigation Flow:
1. Authenticated Users: Auth → Profile Check → Main App or Onboarding  
2. Anonymous Users with Onboarding: Auth → Anonymous State Check → Main App
3. Anonymous Users without Onboarding: Auth → Anonymous State Check → Welcome Screen
4. Anonymous Users accessing Protected: Anonymous State Check → Allow or Redirect to Sign-in

This creates a seamless dual experience where anonymous users who complete onboarding can access the main application features without authentication barriers, while maintaining security for authenticated user flows.
</info added on 2025-07-10T14:25:26.125Z>

